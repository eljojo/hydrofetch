#!/usr/bin/env ruby

require_relative "../lib/hydrofetch"

require 'sinatra/base'

$scraper = Hydrofetch::Scraper.new(ENV["HYDRO_USER"], ENV["HYDRO_PASS"])

class HydrofetchWeb < Sinatra::Base
  configure do
    Time.zone = 'America/Toronto'
  end

  before {
    env["rack.errors"] =  $stdout
    content_type 'application/json'
  }

  get('/') do
    next unless (result = $scraper.one_day_ago.dup)

    # here we do some weird stuff:
    # consumed_kwh records the total energy used in an hourly interval,
    # but charts look too static, so we want something slowly increasing.
    # for this, we multiply the consumption by the proportion of the passed hour.
    # caveat: since these are really small numbers, we wanna make sure the total is recorded entirely
    # so we also max out 5 minutes before the end of the hour (hence 3300)
    hour_proportion = (Time.now.to_i % 3600) / 3300.0
    hour_proportion = 1 if hour_proportion > 1
    result[:consumed_kwh_proportional] = (result[:consumed_kwh] * hour_proportion).round(2)

    JSON.pretty_generate(result)
  end

  get('/report') do
    JSON.pretty_generate($scraper.report)
  end
end

if ARGV[0] == "server"
  HydrofetchWeb.run!(port: 8080)
else
  puts JSON.pretty_generate($scraper.one_day_ago)
end
